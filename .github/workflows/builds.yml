name: Builds

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  CMake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-20.04
            triplet: x64-linux
            shared: dynamic
            config: Debug
          - os: ubuntu-20.04
            triplet: x64-linux
            shared: static
            config: Debug
          - os: ubuntu-20.04
            triplet: x64-linux
            shared: dynamic
            config: Release

          - os: macos-10.15
            triplet: x64-osx
            shared: static
            config: Debug
          - os: macos-10.15
            triplet: x64-osx
            shared: dynamic
            config: Release

          - os: windows-2019
            triplet: x64-windows
            shared: static
            config: Debug
          - os: windows-2019
            triplet: x64-windows
            shared: dynamic
            config: Release

          # Test libtcod without SDL.
          - os: ubuntu-20.04
            triplet: x64-linux
            shared: dynamic
            config: Debug
            cmake_extra_args: "-DLIBTCOD_SAMPLES=OFF -DLIBTCOD_SDL2=disable"
          - os: windows-2019
            triplet: x64-windows
            shared: dynamic
            config: Debug
            cmake_extra_args: "-DLIBTCOD_SAMPLES=OFF -DLIBTCOD_SDL2=disable"

    env:
      CMAKE_BUILD_DIR: build
      VCPKG_ROOT: ${{github.workspace}}/vcpkg
      VCPKG_LIBRARY_LINKAGE: ${{matrix.shared}}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain temporary files generated during the build of the installed packages.
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json', '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        run: |
          cmake -S . -B ${{env.CMAKE_BUILD_DIR}} -GNinja \
            -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" \
            -DCMAKE_BUILD_TYPE=${{matrix.config}} \
            -DLIBTCOD_SDL2=find_package \
            -DLIBTCOD_ZLIB=find_package \
            -DLIBTCOD_GLAD=find_package \
            -DLIBTCOD_LODEPNG=find_package \
            -DLIBTCOD_UTF8PROC=vcpkg \
            -DLIBTCOD_STB=vcpkg \
            -DCMAKE_INSTALL_PREFIX=local \
            -DBUILD_SHARED_LIBS=${{ matrix.shared == 'dynamic' && 'TRUE' || 'FALSE' }} \
            -DLIBTCOD_SAMPLES=ON \
            -DLIBTCOD_TESTS=ON \
            -Wdev \
            ${{ matrix.cmake_extra_args }}
      - name: CMake build
        run: |
          cmake --build ${{env.CMAKE_BUILD_DIR}}
      - name: List build files
        run: find ${{env.CMAKE_BUILD_DIR}}
      - name: Run tests
        env:
          LD_LIBRARY_PATH: ${{env.CMAKE_BUILD_DIR}}/lib
        run: |
          ${{env.CMAKE_BUILD_DIR}}/bin/unittest ~[!nonportable] ${{ matrix.config != 'Release' && '~[benchmark]' || '' }}
      - name: CMake test install
        run: |
          cmake --install ${{env.CMAKE_BUILD_DIR}} --config ${{matrix.config}}

  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-20.04
            triplet: x64-linux
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install the latest CMake
        uses: lukka/get-cmake@latest
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json', '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
      - name: CMake configure
        run: |
          cmake . -GNinja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="--coverage" \
            -DCMAKE_C_FLAGS="--coverage" \
            -DLIBTCOD_SDL2=find_package \
            -DLIBTCOD_ZLIB=find_package \
            -DLIBTCOD_GLAD=find_package \
            -DLIBTCOD_LODEPNG=find_package \
            -DLIBTCOD_UTF8PROC=vcpkg \
            -DLIBTCOD_STB=vcpkg \
            -DLIBTCOD_SAMPLES=OFF \
            -DLIBTCOD_TESTS=ON \
            -Wdev
      - name: CMake build
        run: |
          cmake --build .
      - name: Run tests
        env:
          LD_LIBRARY_PATH: lib
        run: |
          bin/unittest ~[!nonportable] ~[benchmark]
      - name: List coverage files
        run: find . | grep -e ".gc..$"
      - name: Generate coverage data
        run: gcov CMakeFiles/libtcod.dir/src/libtcod/*.o CMakeFiles/libtcod.dir/src/libtcod/*/*.o tests/CMakeFiles/unittest.dir/*.o
      - uses: codecov/codecov-action@v2

  Autotools:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, macos-10.15]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install APT dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-dev
      - name: Install Brew dependencies
        if: runner.os == 'macOS'
        run: |
          brew install automake sdl2
      - name: Configure package
        working-directory: buildsys/autotools
        run: |
          autoreconf --install
          ./configure --prefix=$HOME/.local
      - name: Build package
        working-directory: buildsys/autotools
        run: |
          make -j 3 install
      - name: Run tests
        working-directory: buildsys/autotools
        run: |
          make check

  SCons:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04]
        architecture: [x86_64]
        include:
          - os: "macos-11.0"
            architecture: universal2
            experimental: true
          - os: "macos-10.15"
            architecture: x86_64
          - os: "windows-2019"
            architecture: x86
          - os: "windows-2019"
            architecture: x86_64
          - os: "windows-2019"
            architecture: x86_64
            toolset: mingw
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install SCons
        run: |
          python -m pip install --upgrade pip
          python -m pip install scons
      - name: Install APT dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-dev
      - name: Install Brew dependencies
        if: runner.os == 'macOS'
        run: |
          brew install sdl2
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.toolset == 'mingw' }}
        with:
          msystem: MINGW64
          update: true
          install: git scons mingw-w64-x86_64-toolchain mingw-w64-x86_64-SDL2
      - name: Build package.
        if: ${{ matrix.toolset != 'mingw' }}
        working-directory: buildsys/scons
        run: |
          scons develop_all dist -j 3 -s CPPDEFINES=NDEBUG MODE=DEBUG_RELEASE ARCH=${{ matrix.architecture }}
      - name: Build package (MinGW)
        if: ${{ matrix.toolset == 'mingw' }}
        working-directory: buildsys/scons
        shell: msys2 {0}
        run: |
          scons develop_all dist -j 3 -s CPPDEFINES=NDEBUG MODE=DEBUG_RELEASE ARCH=${{ matrix.architecture }} \
            TOOLSET=mingw
      - name: Archive distribution
        uses: actions/upload-artifact@v2
        with:
          name: scons-dist
          path: |
            buildsys/scons/libtcod-*.zip
            buildsys/scons/libtcod-*.tar.*
          retention-days: 3
      - name: Upload release
        if: runner.os != 'Linux' && startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: buildsys/scons/libtcod-*.*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true

  verify-shaders:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Verify shader sources
        run: ./scripts/update_shader.py --check
